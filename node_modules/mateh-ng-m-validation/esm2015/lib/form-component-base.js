import { __decorate } from "tslib";
import { ViewChildren, ElementRef } from "@angular/core";
import { FormControlName, FormGroup, FormArray, } from "@angular/forms";
import { fromEvent, merge } from "rxjs";
import { debounceTime } from "rxjs/operators";
export class FormComponentBase {
    constructor() {
        this.validationMessages = {};
        this.formErrors = {};
    }
    startControlMonitoring(form, unsubscribePreviousForm = false) {
        if (unsubscribePreviousForm) {
            this.mySubs.unsubscribe();
        }
        // Watch for the blur event from any input element on the form.
        //  This is required because the valueChanges does not provide notification on blur.
        this.subscribe(form, this.formInputElements.toArray());
        this.formInputElements.changes.subscribe((inputs) => {
            this.subscribe(form, inputs.toArray());
        });
    }
    subscribe(form, inputsArray) {
        // console.log(inputsArray);
        const controlBlurs = inputsArray.map((formControl) => fromEvent(formControl.nativeElement, "blur"));
        // Merge the blur event observable with the valueChanges observable so we only need to subscribe once.
        this.mySubs = merge(form.valueChanges, ...controlBlurs)
            .pipe(debounceTime(300))
            .subscribe((value) => {
            this.logValidationErrors(form);
        });
    }
    logValidationErrors(group) {
        Object.keys(group.controls).forEach((key) => {
            const abstractControl = group.get(key);
            this.formErrors[key] = "";
            // console.log(key, abstractControl.invalid, abstractControl.touched, abstractControl.dirty);
            if (abstractControl &&
                !abstractControl.valid &&
                (abstractControl.touched || abstractControl.dirty)) {
                const messages = this.validationMessages[key];
                for (const errorKey in abstractControl.errors) {
                    if (errorKey) {
                        this.formErrors[key] += messages[errorKey] + " ";
                    }
                }
            }
            // console.log(this.formErrors);
            if (abstractControl instanceof FormGroup ||
                abstractControl instanceof FormArray) {
                this.logValidationErrors(abstractControl);
            }
        });
    }
    atLeastOneCheckboxCheckedValidator(minRequired = 1) {
        return function validate(formGroup) {
            let checked = 0;
            Object.keys(formGroup.controls).forEach((key) => {
                const control = formGroup.controls[key];
                if (control.value) {
                    checked++;
                }
            });
            if (checked < minRequired) {
                return {
                    requireCheckboxToBeChecked: true,
                };
            }
            return null;
        };
    }
    passwordsMustMatchValidator() {
        return (group) => {
            const currentPassword = group.get("password");
            const newPassword = group.get("confirmPassword");
            if (currentPassword && newPassword) {
                if (currentPassword.pristine || newPassword.pristine) {
                    return null;
                }
                if (currentPassword.value !== newPassword.value) {
                    return { passwordsMustMatch: true };
                }
            }
            return null;
        };
    }
    ngOnDestroy() {
        this.mySubs.unsubscribe();
    }
}
__decorate([
    ViewChildren(FormControlName, { read: ElementRef })
], FormComponentBase.prototype, "formInputElements", void 0);
//# sourceMappingURL=data:application/json;base64,