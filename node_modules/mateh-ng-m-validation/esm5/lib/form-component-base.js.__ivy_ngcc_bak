import { __decorate, __read, __spread } from "tslib";
import { ViewChildren, ElementRef } from "@angular/core";
import { FormControlName, FormGroup, FormArray, } from "@angular/forms";
import { fromEvent, merge } from "rxjs";
import { debounceTime } from "rxjs/operators";
var FormComponentBase = /** @class */ (function () {
    function FormComponentBase() {
        this.validationMessages = {};
        this.formErrors = {};
    }
    FormComponentBase.prototype.startControlMonitoring = function (form, unsubscribePreviousForm) {
        var _this = this;
        if (unsubscribePreviousForm === void 0) { unsubscribePreviousForm = false; }
        if (unsubscribePreviousForm) {
            this.mySubs.unsubscribe();
        }
        // Watch for the blur event from any input element on the form.
        //  This is required because the valueChanges does not provide notification on blur.
        this.subscribe(form, this.formInputElements.toArray());
        this.formInputElements.changes.subscribe(function (inputs) {
            _this.subscribe(form, inputs.toArray());
        });
    };
    FormComponentBase.prototype.subscribe = function (form, inputsArray) {
        var _this = this;
        // console.log(inputsArray);
        var controlBlurs = inputsArray.map(function (formControl) {
            return fromEvent(formControl.nativeElement, "blur");
        });
        // Merge the blur event observable with the valueChanges observable so we only need to subscribe once.
        this.mySubs = merge.apply(void 0, __spread([form.valueChanges], controlBlurs)).pipe(debounceTime(300))
            .subscribe(function (value) {
            _this.logValidationErrors(form);
        });
    };
    FormComponentBase.prototype.logValidationErrors = function (group) {
        var _this = this;
        Object.keys(group.controls).forEach(function (key) {
            var abstractControl = group.get(key);
            _this.formErrors[key] = "";
            // console.log(key, abstractControl.invalid, abstractControl.touched, abstractControl.dirty);
            if (abstractControl &&
                !abstractControl.valid &&
                (abstractControl.touched || abstractControl.dirty)) {
                var messages = _this.validationMessages[key];
                for (var errorKey in abstractControl.errors) {
                    if (errorKey) {
                        _this.formErrors[key] += messages[errorKey] + " ";
                    }
                }
            }
            // console.log(this.formErrors);
            if (abstractControl instanceof FormGroup ||
                abstractControl instanceof FormArray) {
                _this.logValidationErrors(abstractControl);
            }
        });
    };
    FormComponentBase.prototype.atLeastOneCheckboxCheckedValidator = function (minRequired) {
        if (minRequired === void 0) { minRequired = 1; }
        return function validate(formGroup) {
            var checked = 0;
            Object.keys(formGroup.controls).forEach(function (key) {
                var control = formGroup.controls[key];
                if (control.value) {
                    checked++;
                }
            });
            if (checked < minRequired) {
                return {
                    requireCheckboxToBeChecked: true,
                };
            }
            return null;
        };
    };
    FormComponentBase.prototype.passwordsMustMatchValidator = function () {
        return function (group) {
            var currentPassword = group.get("password");
            var newPassword = group.get("confirmPassword");
            if (currentPassword && newPassword) {
                if (currentPassword.pristine || newPassword.pristine) {
                    return null;
                }
                if (currentPassword.value !== newPassword.value) {
                    return { passwordsMustMatch: true };
                }
            }
            return null;
        };
    };
    FormComponentBase.prototype.ngOnDestroy = function () {
        this.mySubs.unsubscribe();
    };
    __decorate([
        ViewChildren(FormControlName, { read: ElementRef })
    ], FormComponentBase.prototype, "formInputElements", void 0);
    return FormComponentBase;
}());
export { FormComponentBase };
//# sourceMappingURL=data:application/json;base64,