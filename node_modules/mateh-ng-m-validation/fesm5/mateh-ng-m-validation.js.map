{"version":3,"file":"mateh-ng-m-validation.js","sources":["ng:/mateh-ng-m-validation/lib/ng-m-validation.component.ts","ng:/mateh-ng-m-validation/lib/ng-m-validation.module.ts","ng:/mateh-ng-m-validation/lib/form-component-base.ts","ng:/mateh-ng-m-validation/lib/cross-field-error-matcher.ts","ng:/mateh-ng-m-validation/public-api.ts","ng:/mateh-ng-m-validation/mateh-ng-m-validation.ts"],"names":[],"mappings":";;;;;;;;IAaE;KAAiB;IAEjB,6CAAQ,GAAR;KACC,CACH;IANa,0BAA0B,wBATtC,SAAS,CAAC,cACT,QAAQ,EAAE,uBAAuB,cACjC,QAAQ;CAAE,uDAIT,UAEF,CAAC,QACW,0BAA0B,CAOtC;;;;;;;;;;;gDACD;IADA,iCAAC;CAPD;;ACTA;AACA;;IAeA;KAAmC;IAAtB,mBAAmB,wBAb/B,QAAQ,CAAC,cACR,YAAY;CAAE,kBACZ,0BAA0B,eAG3B,cACD,OAAO,EAAE,EAAE,cACX,OAAO,EAAE,kBACP,0BAA0B;CAG3B,WACF,CAAC,QACW,mBAAmB,CAAG;;;;;;;;;;;;gDACnC;IADkC,0BAAC;CAAnC;;;ICPA;QAIS,uBAAkB,GAAiD,EAAE,CAAC;QACtE,eAAU,GAA8B,EAAE,CAAC;KA4GnD;IAxGW,kDAAsB,GAAhC,UACE,IAAe,EACf,uBAA+B;QAFjC,iBAgBC;QAdC,wCAAA,EAAA,+BAA+B;QAE/B,IAAI,uBAAuB,EAAE;YAC3B,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;SAC3B;;;QAGD,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC,CAAC;QAEvD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,SAAS,CACtC,UAAC,MAA6B;YAC5B,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;SACxC,CACF,CAAC;KACH;IAEO,qCAAS,GAAjB,UAAkB,IAAe,EAAE,WAAyB;QAA5D,iBAcC;;QAZC,IAAM,YAAY,GAEZ,WAAW,CAAC,GAAG,CAAC,UAAC,WAAuB;YAC5C,OAAA,SAAS,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,CAAC;SAAA,CAC7C,CAAC;;QAGF,IAAI,CAAC,MAAM,GAAG,KAAK,yBAAC,IAAI,CAAC,YAAY,GAAK,YAAY,GACnD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aACvB,SAAS,CAAC,UAAC,KAAK;YACf,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;SAChC,CAAC,CAAC;KACN;IAEO,+CAAmB,GAA3B,UAA4B,KAA4B;QAAxD,iBA0BC;QAzBC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAC,GAAW;YAC9C,IAAM,eAAe,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAEvC,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;;YAE1B,IACE,eAAe;gBACf,CAAC,eAAe,CAAC,KAAK;iBACrB,eAAe,CAAC,OAAO,IAAI,eAAe,CAAC,KAAK,CAAC,EAClD;gBACA,IAAM,QAAQ,GAAG,KAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBAC9C,KAAK,IAAM,QAAQ,IAAI,eAAe,CAAC,MAAM,EAAE;oBAC7C,IAAI,QAAQ,EAAE;wBACZ,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC;qBAClD;iBACF;aACF;;YAED,IACE,eAAe,YAAY,SAAS;gBACpC,eAAe,YAAY,SAAS,EACpC;gBACA,KAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;aAC3C;SACF,CAAC,CAAC;KACJ;IAED,8DAAkC,GAAlC,UAAmC,WAAe;QAAf,4BAAA,EAAA,eAAe;QAChD,OAAO,SAAS,QAAQ,CAAC,SAAgC;YACvD,IAAI,OAAO,GAAG,CAAC,CAAC;YAEhB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;gBAC1C,IAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAExC,IAAI,OAAO,CAAC,KAAK,EAAE;oBACjB,OAAO,EAAE,CAAC;iBACX;aACF,CAAC,CAAC;YAEH,IAAI,OAAO,GAAG,WAAW,EAAE;gBACzB,OAAO;oBACL,0BAA0B,EAAE,IAAI;iBACjC,CAAC;aACH;YAED,OAAO,IAAI,CAAC;SACb,CAAC;KACH;IAED,uDAA2B,GAA3B;QACE,OAAO,UAAC,KAAgB;YACtB,IAAM,eAAe,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC9C,IAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAEjD,IAAI,eAAe,IAAI,WAAW,EAAE;gBAClC,IAAI,eAAe,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,EAAE;oBACpD,OAAO,IAAI,CAAC;iBACb;gBACD,IAAI,eAAe,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK,EAAE;oBAC/C,OAAO,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC;iBACrC;aACF;YACD,OAAO,IAAI,CAAC;SACb,CAAC;KACH;IAED,uCAAW,GAAX;QACE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;KAC3B;IA9GD;QADC,YAAY,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;gEACX;;;;;;;;AAC3C;IA8GA,wBAAC;CAjHD;;ACPA;AACA;AACA;;IACA;KAUC;IATC,6CAAY,GAAZ,UACE,OAA2B,EAC3B,IAAwC;QAExC,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC;SACrE;QACD,OAAO,KAAK,CAAC;KACd;IACH,6BAAC;AAAD,CAAC;;ACjBD;;;;ACAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'mateh-ng-m-validation',\n  template: `\n    <p>\n      ng-m-validation works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgMValidationComponentBase implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { NgMValidationComponentBase } from \"./ng-m-validation.component\";\n// import { CrossFieldErrorMatcher } from \"./cross-field-error-matcher\";\n// import { FormComponentBase } from \"./form-component-base\";\n\n@NgModule({\n  declarations: [\n    NgMValidationComponentBase,\n    // CrossFieldErrorMatcher,\n    // FormComponentBase,\n  ],\n  imports: [],\n  exports: [\n    NgMValidationComponentBase,\n    // CrossFieldErrorMatcher,\n    // FormComponentBase,\n  ],\n})\nexport class NgMValidationModule {}\n","import { ViewChildren, ElementRef, QueryList, OnDestroy } from \"@angular/core\";\nimport {\n  FormControlName,\n  FormGroup,\n  FormArray,\n  ValidatorFn,\n  ValidationErrors,\n} from \"@angular/forms\";\nimport { Observable, fromEvent, merge, Subscriber, Subscription } from \"rxjs\";\nimport { debounceTime } from \"rxjs/operators\";\n\nexport class FormComponentBase implements OnDestroy {\n  @ViewChildren(FormControlName, { read: ElementRef })\n  formInputElements: QueryList<ElementRef>;\n\n  public validationMessages: { [key: string]: { [key: string]: string } } = {};\n  public formErrors: { [key: string]: string } = {};\n\n  mySubs: Subscription;\n\n  protected startControlMonitoring(\n    form: FormGroup,\n    unsubscribePreviousForm = false\n  ): void {\n    if (unsubscribePreviousForm) {\n      this.mySubs.unsubscribe();\n    }\n    // Watch for the blur event from any input element on the form.\n    //  This is required because the valueChanges does not provide notification on blur.\n    this.subscribe(form, this.formInputElements.toArray());\n\n    this.formInputElements.changes.subscribe(\n      (inputs: QueryList<ElementRef>) => {\n        this.subscribe(form, inputs.toArray());\n      }\n    );\n  }\n\n  private subscribe(form: FormGroup, inputsArray: ElementRef[]) {\n    // console.log(inputsArray);\n    const controlBlurs: Observable<\n      any\n    >[] = inputsArray.map((formControl: ElementRef) =>\n      fromEvent(formControl.nativeElement, \"blur\")\n    );\n\n    // Merge the blur event observable with the valueChanges observable so we only need to subscribe once.\n    this.mySubs = merge(form.valueChanges, ...controlBlurs)\n      .pipe(debounceTime(300))\n      .subscribe((value) => {\n        this.logValidationErrors(form);\n      });\n  }\n\n  private logValidationErrors(group: FormGroup | FormArray): void {\n    Object.keys(group.controls).forEach((key: string) => {\n      const abstractControl = group.get(key);\n\n      this.formErrors[key] = \"\";\n      // console.log(key, abstractControl.invalid, abstractControl.touched, abstractControl.dirty);\n      if (\n        abstractControl &&\n        !abstractControl.valid &&\n        (abstractControl.touched || abstractControl.dirty)\n      ) {\n        const messages = this.validationMessages[key];\n        for (const errorKey in abstractControl.errors) {\n          if (errorKey) {\n            this.formErrors[key] += messages[errorKey] + \" \";\n          }\n        }\n      }\n      // console.log(this.formErrors);\n      if (\n        abstractControl instanceof FormGroup ||\n        abstractControl instanceof FormArray\n      ) {\n        this.logValidationErrors(abstractControl);\n      }\n    });\n  }\n\n  atLeastOneCheckboxCheckedValidator(minRequired = 1): ValidatorFn {\n    return function validate(formGroup: FormGroup | FormArray) {\n      let checked = 0;\n\n      Object.keys(formGroup.controls).forEach((key) => {\n        const control = formGroup.controls[key];\n\n        if (control.value) {\n          checked++;\n        }\n      });\n\n      if (checked < minRequired) {\n        return {\n          requireCheckboxToBeChecked: true,\n        };\n      }\n\n      return null;\n    };\n  }\n\n  passwordsMustMatchValidator(): ValidatorFn {\n    return (group: FormGroup): ValidationErrors | null => {\n      const currentPassword = group.get(\"password\");\n      const newPassword = group.get(\"confirmPassword\");\n\n      if (currentPassword && newPassword) {\n        if (currentPassword.pristine || newPassword.pristine) {\n          return null;\n        }\n        if (currentPassword.value !== newPassword.value) {\n          return { passwordsMustMatch: true };\n        }\n      }\n      return null;\n    };\n  }\n\n  ngOnDestroy() {\n    this.mySubs.unsubscribe();\n  }\n}\n","import { ErrorStateMatcher } from \"@angular/material/core/error/error-options\";\nimport { FormControl, FormGroupDirective, NgForm } from \"@angular/forms\";\nimport { Component } from \"@angular/core\";\n\n// @Component({\n//   template: ``,\n// })\nexport class CrossFieldErrorMatcher implements ErrorStateMatcher {\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    if (control) {\n      return (control.dirty || control.touched) && control.parent.invalid;\n    }\n    return false;\n  }\n}\n","/*\n * Public API Surface of ng-m-validation\n */\n\nexport * from \"./lib/ng-m-validation.component\";\nexport * from \"./lib/ng-m-validation.module\";\nexport * from \"./lib/form-component-base\";\nexport * from \"./lib/cross-field-error-matcher\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}