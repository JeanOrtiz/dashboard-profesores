import { __decorate } from 'tslib';
import { Component, NgModule, ViewChildren, ElementRef } from '@angular/core';
import { FormGroup, FormArray, FormControlName } from '@angular/forms';
import { fromEvent, merge } from 'rxjs';
import { debounceTime } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
let NgMValidationComponentBase = class NgMValidationComponentBase {
    constructor() { }
    ngOnInit() {
    }
};
NgMValidationComponentBase.ɵfac = function NgMValidationComponentBase_Factory(t) { return new (t || NgMValidationComponentBase)(); };
NgMValidationComponentBase.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgMValidationComponentBase, selectors: [["mateh-ng-m-validation"]], decls: 2, vars: 0, template: function NgMValidationComponentBase_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "p");
        ɵngcc0.ɵɵtext(1, " ng-m-validation works! ");
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });

// import { CrossFieldErrorMatcher } from "./cross-field-error-matcher";
// import { FormComponentBase } from "./form-component-base";
let NgMValidationModule = class NgMValidationModule {
};
NgMValidationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMValidationModule });
NgMValidationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMValidationModule_Factory(t) { return new (t || NgMValidationModule)(); }, imports: [[]] });

class FormComponentBase {
    constructor() {
        this.validationMessages = {};
        this.formErrors = {};
    }
    startControlMonitoring(form, unsubscribePreviousForm = false) {
        if (unsubscribePreviousForm) {
            this.mySubs.unsubscribe();
        }
        // Watch for the blur event from any input element on the form.
        //  This is required because the valueChanges does not provide notification on blur.
        this.subscribe(form, this.formInputElements.toArray());
        this.formInputElements.changes.subscribe((inputs) => {
            this.subscribe(form, inputs.toArray());
        });
    }
    subscribe(form, inputsArray) {
        // console.log(inputsArray);
        const controlBlurs = inputsArray.map((formControl) => fromEvent(formControl.nativeElement, "blur"));
        // Merge the blur event observable with the valueChanges observable so we only need to subscribe once.
        this.mySubs = merge(form.valueChanges, ...controlBlurs)
            .pipe(debounceTime(300))
            .subscribe((value) => {
            this.logValidationErrors(form);
        });
    }
    logValidationErrors(group) {
        Object.keys(group.controls).forEach((key) => {
            const abstractControl = group.get(key);
            this.formErrors[key] = "";
            // console.log(key, abstractControl.invalid, abstractControl.touched, abstractControl.dirty);
            if (abstractControl &&
                !abstractControl.valid &&
                (abstractControl.touched || abstractControl.dirty)) {
                const messages = this.validationMessages[key];
                for (const errorKey in abstractControl.errors) {
                    if (errorKey) {
                        this.formErrors[key] += messages[errorKey] + " ";
                    }
                }
            }
            // console.log(this.formErrors);
            if (abstractControl instanceof FormGroup ||
                abstractControl instanceof FormArray) {
                this.logValidationErrors(abstractControl);
            }
        });
    }
    atLeastOneCheckboxCheckedValidator(minRequired = 1) {
        return function validate(formGroup) {
            let checked = 0;
            Object.keys(formGroup.controls).forEach((key) => {
                const control = formGroup.controls[key];
                if (control.value) {
                    checked++;
                }
            });
            if (checked < minRequired) {
                return {
                    requireCheckboxToBeChecked: true,
                };
            }
            return null;
        };
    }
    passwordsMustMatchValidator() {
        return (group) => {
            const currentPassword = group.get("password");
            const newPassword = group.get("confirmPassword");
            if (currentPassword && newPassword) {
                if (currentPassword.pristine || newPassword.pristine) {
                    return null;
                }
                if (currentPassword.value !== newPassword.value) {
                    return { passwordsMustMatch: true };
                }
            }
            return null;
        };
    }
    ngOnDestroy() {
        this.mySubs.unsubscribe();
    }
}
FormComponentBase.ɵfac = function FormComponentBase_Factory(t) { return new (t || FormComponentBase)(); };
FormComponentBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormComponentBase, viewQuery: function FormComponentBase_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(FormControlName, true, ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formInputElements = _t);
    } } });
__decorate([
    ViewChildren(FormControlName, { read: ElementRef })
], FormComponentBase.prototype, "formInputElements", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMValidationComponentBase, [{
        type: Component,
        args: [{
                selector: 'mateh-ng-m-validation',
                template: `
    <p>
      ng-m-validation works!
    </p>
  `
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMValidationModule, { declarations: [NgMValidationComponentBase], exports: [NgMValidationComponentBase] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMValidationModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NgMValidationComponentBase,
                ],
                imports: [],
                exports: [
                    NgMValidationComponentBase,
                ]
            }]
    }], null, null); })();


// @Component({
//   template: ``,
// })
class CrossFieldErrorMatcher {
    isErrorState(control, form) {
        if (control) {
            return (control.dirty || control.touched) && control.parent.invalid;
        }
        return false;
    }
}

/*
 * Public API Surface of ng-m-validation
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CrossFieldErrorMatcher, FormComponentBase, NgMValidationComponentBase, NgMValidationModule };

//# sourceMappingURL=mateh-ng-m-validation.js.map