import { __decorate } from 'tslib';
import { ViewChild, Input, Component, NgModule } from '@angular/core';
import { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';
import { MatSort, MatSortModule } from '@angular/material/sort';
import { MatTable, MatTableModule } from '@angular/material/table';
import { DataSource } from '@angular/cdk/collections';
import { map } from 'rxjs/operators';
import { of, merge } from 'rxjs';
import { FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatMenuModule } from '@angular/material/menu';

// TODO: Replace this with your own data model type
// export interface DataTableItem {
//   name: string;
//   id: number;
// }
/**
 * Data source for the DataTable view. This class should
 * encapsulate all logic for fetching and manipulating the displayed data
 * (including sorting, pagination, and filtering).
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/form-field';
import * as ɵngcc4 from '@angular/material/icon';
import * as ɵngcc5 from '@angular/material/input';
import * as ɵngcc6 from '@angular/material/table';
import * as ɵngcc7 from '@angular/material/sort';
import * as ɵngcc8 from '@angular/material/paginator';
import * as ɵngcc9 from '@angular/material/button';
import * as ɵngcc10 from '@angular/material/menu';

function NgMDatatable_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r67 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 16);
    ɵngcc0.ɵɵlistener("click", function NgMDatatable_button_4_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r67); const ctx_r66 = ɵngcc0.ɵɵnextContext(); return ctx_r66.options == null ? null : ctx_r66.options.addButton.handler(); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r59 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r59.options == null ? null : ctx_r59.options.addButton.icon);
} }
const _c0 = function (a0) { return { "t-right": a0 }; };
function NgMDatatable_ng_container_14_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "th", 20);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const c_r68 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(2, _c0, c_r68.type == "action"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", c_r68.text, " ");
} }
function NgMDatatable_ng_container_14_td_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const row_r72 = ɵngcc0.ɵɵnextContext().$implicit;
    const c_r68 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", row_r72[c_r68.id], "");
} }
function NgMDatatable_ng_container_14_td_3_ng_container_2_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r82 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 26);
    ɵngcc0.ɵɵlistener("click", function NgMDatatable_ng_container_14_td_3_ng_container_2_button_6_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r82); const a_r79 = ctx.$implicit; const row_r72 = ɵngcc0.ɵɵnextContext(2).$implicit; return a_r79.handler(row_r72); });
    ɵngcc0.ɵɵelementStart(1, "mat-icon");
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span");
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const a_r79 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("disabled", a_r79.disabled);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(a_r79.icon);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(a_r79.text);
} }
function NgMDatatable_ng_container_14_td_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "button", 23);
    ɵngcc0.ɵɵelementStart(2, "mat-icon");
    ɵngcc0.ɵɵtext(3, "more_vert");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "mat-menu", null, 24);
    ɵngcc0.ɵɵtemplate(6, NgMDatatable_ng_container_14_td_3_ng_container_2_button_6_Template, 5, 3, "button", 25);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r77 = ɵngcc0.ɵɵreference(5);
    const c_r68 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r74 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matMenuTriggerFor", _r77);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r74.asAction(c_r68).actions);
} }
function NgMDatatable_ng_container_14_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 21);
    ɵngcc0.ɵɵtemplate(1, NgMDatatable_ng_container_14_td_3_ng_container_1_Template, 2, 1, "ng-container", 22);
    ɵngcc0.ɵɵtemplate(2, NgMDatatable_ng_container_14_td_3_ng_container_2_Template, 7, 2, "ng-container", 22);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const c_r68 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", c_r68.type == "text" || !c_r68.type);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", c_r68.type == "action");
} }
function NgMDatatable_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementContainerStart(1, 17);
    ɵngcc0.ɵɵtemplate(2, NgMDatatable_ng_container_14_th_2_Template, 2, 4, "th", 18);
    ɵngcc0.ɵɵtemplate(3, NgMDatatable_ng_container_14_td_3_Template, 3, 2, "td", 19);
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const c_r68 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("matColumnDef", c_r68.id);
} }
function NgMDatatable_tr_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 27);
} }
function NgMDatatable_tr_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "tr", 28);
} }
function NgMDatatable_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 29);
    ɵngcc0.ɵɵelementStart(1, "h3", 30);
    ɵngcc0.ɵɵtext(2, " No elements ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
function NgMDatatable_div_18_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 31);
    ɵngcc0.ɵɵelementStart(1, "div", 32);
    ɵngcc0.ɵɵelement(2, "div");
    ɵngcc0.ɵɵelement(3, "div", 33);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c1 = function () { return [25, 50, 100, 250]; };
class DataTableDataSource extends DataSource {
    constructor(data) {
        super();
        this.data = data;
    }
    /**
     * Connect this data source to the table. The table will only update when
     * the returned stream emits new items.
     * @returns A stream of the items to be rendered.
     */
    connect() {
        // Combine everything that affects the rendered data into one update
        // stream for the data-table to consume.
        const dataMutations = [
            of(this.data),
            this.paginator.page,
            this.sort.sortChange,
        ];
        return merge(...dataMutations).pipe(map(() => {
            return this.getPagedData(this.getSortedData([...this.data]));
        }));
    }
    /**
     *  Called when the table is being destroyed. Use this function, to clean up
     * any open connections or free any held resources that were set up during connect.
     */
    disconnect() { }
    /**
     * Paginate the data (client-side). If you're using server-side pagination,
     * this would be replaced by requesting the appropriate data from the server.
     */
    getPagedData(data) {
        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;
        return data.splice(startIndex, this.paginator.pageSize);
    }
    /**
     * Sort the data (client-side). If you're using server-side sorting,
     * this would be replaced by requesting the appropriate data from the server.
     */
    getSortedData(data) {
        if (!this.sort.active || this.sort.direction === "") {
            return data;
        }
        return data.sort((a, b) => {
            const isAsc = this.sort.direction === "asc";
            switch (this.sort.active) {
                case "name":
                    return compare(a["name"], b["name"], isAsc);
                case "id":
                    return compare(+a["id"], +b["id"], isAsc);
                default:
                    return 0;
            }
        });
    }
}
/** Simple sort comparator for example ID/Name columns (for client-side sorting). */
function compare(a, b, isAsc) {
    return (a < b ? -1 : 1) * (isAsc ? 1 : -1);
}

let NgMDatatable = class NgMDatatable {
    constructor(fb) {
        this.data = [];
        this.showSpinner = true;
        this.searchForm = fb.group({
            search: [""],
        });
        this.searchForm.valueChanges.subscribe((v) => {
            this.dataSource.data = this.filter(v.search);
            this.paginator._changePageSize(this.paginator.pageSize);
        });
    }
    ngOnInit() {
        this.dataSource = new DataTableDataSource(this.data || []);
    }
    asAction(c) {
        return c;
    }
    filter(searchName) {
        return searchName && searchName.trim()
            ? this.data.filter((x) => {
                for (const key in x) {
                    if (x[key].toString().toLowerCase().includes(searchName.toLowerCase()))
                        return x;
                }
            })
            : this.data;
    }
    ngAfterViewInit() {
        this.dataSource.data = this.data || [];
        this.dataSource.sort = this.sort;
        this.dataSource.paginator = this.paginator;
        this.table.dataSource = this.dataSource;
        this.tableBg = window.getComputedStyle(document.getElementById("klk")).background;
        this.tableColor = window.getComputedStyle(document.querySelector(".mat-header-cell")).color;
        document
            .querySelector(".table-container")
            .setAttribute("style", `background : ${this.tableBg}; color : ${this.tableColor}`);
        if (this.data.length > 0)
            this.toggleLoading(false);
    }
    toggleLoading(v) {
        this.showSpinner = v;
        const el = document.querySelector("#loading");
        if (el)
            el.setAttribute("style", `border-color : ${this.tableColor};`);
    }
    ngOnChanges(changes) {
        console.log("changes", changes);
        if (changes.data && !changes.data.firstChange) {
            this.dataSource.data = this.data || [];
            this.toggleLoading(false);
            this.paginator._changePageSize(this.paginator.pageSize);
        }
    }
};
NgMDatatable.ɵfac = function NgMDatatable_Factory(t) { return new (t || NgMDatatable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormBuilder)); };
NgMDatatable.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgMDatatable, selectors: [["data-table"]], viewQuery: function NgMDatatable_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(MatPaginator, true);
        ɵngcc0.ɵɵviewQuery(MatSort, true);
        ɵngcc0.ɵɵviewQuery(MatTable, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.paginator = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.sort = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.table = _t.first);
    } }, inputs: { data: "data", options: "options" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 21, vars: 13, consts: [[1, "table-container", "mat-elevation-z8"], [1, "table-header"], [1, "f-left"], ["mat-icon-button", "", "aria-label", "Example icon-button with a heart icon", 3, "click", 4, "ngIf"], [1, "f-right", 3, "formGroup"], [1, "example-full-width"], ["matPrefix", ""], ["formControlName", "search", "matInput", "", "placeholder", "...", "value", ""], ["mat-table", "", "matSort", "", "aria-label", "Elements", 1, "full-width-table"], [4, "ngFor", "ngForOf"], ["id", "klk", "mat-header-row", "", 4, "matHeaderRowDef"], ["mat-row", "", 4, "matRowDef", "matRowDefColumns"], ["class", "", 4, "ngIf"], ["style", "width: 100%;", "class", "d-flex justify-content-center", 4, "ngIf"], [3, "length", "pageIndex", "pageSize", "pageSizeOptions"], ["paginator", ""], ["mat-icon-button", "", "aria-label", "Example icon-button with a heart icon", 3, "click"], [3, "matColumnDef"], ["mat-header-cell", "", "mat-sort-header", "", 3, "ngClass", 4, "matHeaderCellDef"], ["mat-cell", "", 4, "matCellDef"], ["mat-header-cell", "", "mat-sort-header", "", 3, "ngClass"], ["mat-cell", ""], [4, "ngIf"], ["mat-icon-button", "", "aria-label", "Example icon-button with a menu", 1, "f-right", 3, "matMenuTriggerFor"], ["menu", "matMenu"], ["data-toggle", "modal", "data-target", "#add-serviceCats-modal", "mat-menu-item", "", 3, "disabled", "click", 4, "ngFor", "ngForOf"], ["data-toggle", "modal", "data-target", "#add-serviceCats-modal", "mat-menu-item", "", 3, "disabled", "click"], ["id", "klk", "mat-header-row", ""], ["mat-row", ""], [1, ""], [2, "text-align", "center"], [1, "d-flex", "justify-content-center", 2, "width", "100%"], [1, "lds-ripple", 2, "margin", "5px auto"], [2, "border-color", "green"]], template: function NgMDatatable_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "h2");
        ɵngcc0.ɵɵtemplate(4, NgMDatatable_button_4_Template, 3, 1, "button", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "form", 4);
        ɵngcc0.ɵɵelementStart(7, "mat-form-field", 5);
        ɵngcc0.ɵɵelementStart(8, "mat-icon", 6);
        ɵngcc0.ɵɵtext(9, "search");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "mat-label");
        ɵngcc0.ɵɵtext(11, "Search");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "input", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(13, "table", 8);
        ɵngcc0.ɵɵtemplate(14, NgMDatatable_ng_container_14_Template, 4, 1, "ng-container", 9);
        ɵngcc0.ɵɵtemplate(15, NgMDatatable_tr_15_Template, 1, 0, "tr", 10);
        ɵngcc0.ɵɵtemplate(16, NgMDatatable_tr_16_Template, 1, 0, "tr", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, NgMDatatable_div_17_Template, 3, 0, "div", 12);
        ɵngcc0.ɵɵtemplate(18, NgMDatatable_div_18_Template, 4, 0, "div", 13);
        ɵngcc0.ɵɵelement(19, "mat-paginator", 14, 15);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options == null ? null : ctx.options.addButton);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.options == null ? null : ctx.options.title, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("formGroup", ctx.searchForm);
        ɵngcc0.ɵɵadvance(8);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.options == null ? null : ctx.options.columns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matHeaderRowDef", ctx.options == null ? null : ctx.options.displayedColumns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("matRowDefColumns", ctx.options == null ? null : ctx.options.displayedColumns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dataSource.data.length < 1 && !ctx.showSpinner);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showSpinner);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("length", ctx.dataSource == null ? null : ctx.dataSource.data.length)("pageIndex", 0)("pageSize", 50)("pageSizeOptions", ɵngcc0.ɵɵpureFunction0(12, _c1));
    } }, directives: [ɵngcc2.NgIf, ɵngcc1.ɵangular_packages_forms_forms_y, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, ɵngcc3.MatFormField, ɵngcc4.MatIcon, ɵngcc3.MatPrefix, ɵngcc3.MatLabel, ɵngcc1.DefaultValueAccessor, ɵngcc5.MatInput, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, ɵngcc6.MatTable, ɵngcc7.MatSort, ɵngcc2.NgForOf, ɵngcc6.MatHeaderRowDef, ɵngcc6.MatRowDef, ɵngcc8.MatPaginator, ɵngcc9.MatButton, ɵngcc6.MatColumnDef, ɵngcc6.MatHeaderCellDef, ɵngcc6.MatCellDef, ɵngcc6.MatHeaderCell, ɵngcc7.MatSortHeader, ɵngcc2.NgClass, ɵngcc6.MatCell, ɵngcc10.MatMenuTrigger, ɵngcc10._MatMenu, ɵngcc10.MatMenuItem, ɵngcc6.MatHeaderRow, ɵngcc6.MatRow], styles: ["*[_ngcontent-%COMP%]{box-sizing:border-box}.full-width-table[_ngcontent-%COMP%]{width:100%}.t-right[_ngcontent-%COMP%]{display:flex;padding:21px 0;justify-content:flex-end}.data-table[_ngcontent-%COMP%]{width:80%;margin:20px auto}.lds-ripple[_ngcontent-%COMP%]{position:relative;width:80px;height:80px}.lds-ripple[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{position:absolute;border:4px solid #4b3d3d;opacity:1;border-radius:50%;-webkit-animation:1s cubic-bezier(0,.2,.8,1) infinite lds-ripple;animation:1s cubic-bezier(0,.2,.8,1) infinite lds-ripple}.lds-ripple[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2){-webkit-animation-delay:-.5s;animation-delay:-.5s}@-webkit-keyframes lds-ripple{0%{top:36px;left:36px;width:0;height:0;opacity:1}100%{top:0;left:0;width:72px;height:72px;opacity:0}}@keyframes lds-ripple{0%{top:36px;left:36px;width:0;height:0;opacity:1}100%{top:0;left:0;width:72px;height:72px;opacity:0}}.table-container[_ngcontent-%COMP%]{padding:20px 5px;width:100%}.table-header[_ngcontent-%COMP%]{margin:0 40px}.f-right[_ngcontent-%COMP%]{float:right}.f-left[_ngcontent-%COMP%]{float:left}table[_ngcontent-%COMP%]{max-height:80vh}table.mat-table[_ngcontent-%COMP%]{border-spacing:0;width:100%;display:block;overflow-x:auto}.mat-table[_ngcontent-%COMP%]{width:100%;max-width:100%;display:table;border-collapse:collapse;margin:0}.mat-header-row[_ngcontent-%COMP%], .mat-row[_ngcontent-%COMP%]{display:table-row}.mat-cell[_ngcontent-%COMP%], .mat-header-cell[_ngcontent-%COMP%]{word-wrap:initial;display:table-cell;padding:0 5px;line-break:unset;width:100%;white-space:nowrap;overflow:hidden;vertical-align:middle}.mat-header-row[_ngcontent-%COMP%]{position:sticky;position:-webkit-sticky;top:0;z-index:1;background-color:inherit}"] });
NgMDatatable.ctorParameters = () => [
    { type: FormBuilder }
];
__decorate([
    ViewChild(MatPaginator, { static: false })
], NgMDatatable.prototype, "paginator", void 0);
__decorate([
    ViewChild(MatSort, { static: false })
], NgMDatatable.prototype, "sort", void 0);
__decorate([
    ViewChild(MatTable, { static: false })
], NgMDatatable.prototype, "table", void 0);
__decorate([
    Input()
], NgMDatatable.prototype, "options", void 0);
__decorate([
    Input()
], NgMDatatable.prototype, "data", void 0);

let NgMDatatableModule = class NgMDatatableModule {
};
NgMDatatableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgMDatatableModule });
NgMDatatableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgMDatatableModule_Factory(t) { return new (t || NgMDatatableModule)(); }, imports: [[
            CommonModule,
            MatTableModule,
            ReactiveFormsModule,
            MatMenuModule,
            MatButtonModule,
            MatPaginatorModule,
            MatIconModule,
            MatInputModule,
            MatSortModule,
            MatFormFieldModule,
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMDatatable, [{
        type: Component,
        args: [{
                selector: "data-table",
                template: "<div class=\"table-container mat-elevation-z8\">\n  <div class=\"table-header\">\n    <div class=\"f-left\">\n      <h2>\n        <button\n          *ngIf=\"options?.addButton\"\n          (click)=\"options?.addButton.handler()\"\n          mat-icon-button\n          aria-label=\"Example icon-button with a heart icon\"\n        >\n          <mat-icon>{{ options?.addButton.icon }}</mat-icon>\n        </button>\n        {{ options?.title }}\n      </h2>\n    </div>\n    <form\n      class=\"mat-header-cell\"\n      [formGroup]=\"searchForm\"\n      class=\"\"\n      class=\"f-right\"\n    >\n      <mat-form-field class=\"example-full-width\">\n        <mat-icon matPrefix>search</mat-icon>\n        <mat-label>Search</mat-label>\n        <input formControlName=\"search\" matInput placeholder=\"...\" value=\"\" />\n      </mat-form-field>\n    </form>\n  </div>\n  <table mat-table class=\"full-width-table\" matSort aria-label=\"Elements\">\n    <ng-container *ngFor=\"let c of options?.columns\">\n      <ng-container [matColumnDef]=\"c.id\">\n        <th\n          [ngClass]=\"{ 't-right': c.type == 'action' }\"\n          mat-header-cell\n          *matHeaderCellDef\n          mat-sort-header\n        >\n          {{ c.text }}\n        </th>\n        <td mat-cell *matCellDef=\"let row\">\n          <ng-container *ngIf=\"c.type == 'text' || !c.type\">\n            {{ row[c.id] }}</ng-container\n          >\n          <ng-container *ngIf=\"c.type == 'action'\">\n            <button\n              class=\"f-right\"\n              mat-icon-button\n              [matMenuTriggerFor]=\"menu\"\n              aria-label=\"Example icon-button with a menu\"\n            >\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\">\n              <button\n                *ngFor=\"let a of asAction(c).actions\"\n                [disabled]=\"a.disabled\"\n                (click)=\"a.handler(row)\"\n                data-toggle=\"modal\"\n                data-target=\"#add-serviceCats-modal\"\n                mat-menu-item\n              >\n                <mat-icon>{{ a.icon }}</mat-icon>\n                <span>{{ a.text }}</span>\n              </button>\n            </mat-menu>\n          </ng-container>\n        </td>\n      </ng-container>\n    </ng-container>\n\n    <tr\n      id=\"klk\"\n      mat-header-row\n      *matHeaderRowDef=\"options?.displayedColumns\"\n    ></tr>\n    <tr mat-row *matRowDef=\"let row; columns: options?.displayedColumns\"></tr>\n  </table>\n  <div *ngIf=\"dataSource.data.length < 1 && !showSpinner\" class=\"\">\n    <h3 style=\"text-align: center;\">\n      No elements\n    </h3>\n  </div>\n  <div\n    *ngIf=\"showSpinner\"\n    style=\"width: 100%;\"\n    class=\"d-flex justify-content-center\"\n  >\n    <div style=\"margin: 5px auto;\" class=\"lds-ripple\">\n      <div></div>\n      <div style=\"border-color: green;\"></div>\n    </div>\n  </div>\n\n  <mat-paginator\n    #paginator\n    [length]=\"dataSource?.data.length\"\n    [pageIndex]=\"0\"\n    [pageSize]=\"50\"\n    [pageSizeOptions]=\"[25, 50, 100, 250]\"\n  >\n  </mat-paginator>\n</div>\n",
                styles: ["*{box-sizing:border-box}.full-width-table{width:100%}.t-right{display:flex;padding:21px 0;justify-content:flex-end}.data-table{width:80%;margin:20px auto}.lds-ripple{position:relative;width:80px;height:80px}.lds-ripple div{position:absolute;border:4px solid #4b3d3d;opacity:1;border-radius:50%;-webkit-animation:1s cubic-bezier(0,.2,.8,1) infinite lds-ripple;animation:1s cubic-bezier(0,.2,.8,1) infinite lds-ripple}.lds-ripple div:nth-child(2){-webkit-animation-delay:-.5s;animation-delay:-.5s}@-webkit-keyframes lds-ripple{0%{top:36px;left:36px;width:0;height:0;opacity:1}100%{top:0;left:0;width:72px;height:72px;opacity:0}}@keyframes lds-ripple{0%{top:36px;left:36px;width:0;height:0;opacity:1}100%{top:0;left:0;width:72px;height:72px;opacity:0}}.table-container{padding:20px 5px;width:100%}.table-header{margin:0 40px}.f-right{float:right}.f-left{float:left}table{max-height:80vh}table.mat-table{border-spacing:0;width:100%;display:block;overflow-x:auto}.mat-table{width:100%;max-width:100%;display:table;border-collapse:collapse;margin:0}.mat-header-row,.mat-row{display:table-row}.mat-cell,.mat-header-cell{word-wrap:initial;display:table-cell;padding:0 5px;line-break:unset;width:100%;white-space:nowrap;overflow:hidden;vertical-align:middle}.mat-header-row{position:sticky;position:-webkit-sticky;top:0;z-index:1;background-color:inherit}"]
            }]
    }], function () { return [{ type: ɵngcc1.FormBuilder }]; }, { data: [{
            type: Input
        }], paginator: [{
            type: ViewChild,
            args: [MatPaginator, { static: false }]
        }], sort: [{
            type: ViewChild,
            args: [MatSort, { static: false }]
        }], table: [{
            type: ViewChild,
            args: [MatTable, { static: false }]
        }], options: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgMDatatableModule, { declarations: function () { return [NgMDatatable]; }, imports: function () { return [CommonModule,
        MatTableModule,
        ReactiveFormsModule,
        MatMenuModule,
        MatButtonModule,
        MatPaginatorModule,
        MatIconModule,
        MatInputModule,
        MatSortModule,
        MatFormFieldModule]; }, exports: function () { return [NgMDatatable]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgMDatatableModule, [{
        type: NgModule,
        args: [{
                declarations: [NgMDatatable],
                imports: [
                    CommonModule,
                    MatTableModule,
                    ReactiveFormsModule,
                    MatMenuModule,
                    MatButtonModule,
                    MatPaginatorModule,
                    MatIconModule,
                    MatInputModule,
                    MatSortModule,
                    MatFormFieldModule,
                ],
                exports: [NgMDatatable]
            }]
    }], null, null); })();

/*
 * Public API Surface of ng-m-datatable
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DataTableDataSource, NgMDatatable, NgMDatatableModule };

//# sourceMappingURL=mateh-ng-m-datatable.js.map