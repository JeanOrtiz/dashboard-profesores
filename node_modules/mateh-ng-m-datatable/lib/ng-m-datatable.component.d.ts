import { AfterViewInit, OnInit, OnChanges, SimpleChanges, ElementRef } from "@angular/core";
import { MatPaginator } from "@angular/material/paginator";
import { MatSort } from "@angular/material/sort";
import { MatTable } from "@angular/material/table";
import { DataTableDataSource } from "./ng-m-datatable.datasource";
import { FormGroup, FormBuilder } from "@angular/forms";
import * as ɵngcc0 from '@angular/core';
export interface NgMDatatableOptions<T> {
    columns: Array<TextColumn | ActionColumn<T>>;
    displayedColumns: String[];
    title?: String;
    addButton?: {
        icon: string;
        handler: () => void;
    };
}
export interface TextColumn {
    id: string;
    text: string;
    type?: "text";
}
export interface ActionColumn<T> {
    id: string;
    text: string;
    type: "action";
    actions: Array<{
        text: string;
        handler: (data: T) => void;
        icon: string;
        disabled?: string;
    }>;
}
export declare class NgMDatatable<T> implements OnInit, OnChanges, AfterViewInit {
    paginator: MatPaginator;
    sort: MatSort;
    table: MatTable<T>;
    tableHTML: ElementRef;
    options: NgMDatatableOptions<T>;
    data: Array<T>;
    dataSource: DataTableDataSource<T>;
    showSpinner: boolean;
    tableColor: string;
    tableBg: string;
    searchForm: FormGroup;
    constructor(fb: FormBuilder);
    ngOnInit(): void;
    asAction(c: TextColumn | ActionColumn<T>): ActionColumn<T>;
    filter(searchName: string): any;
    ngAfterViewInit(): void;
    toggleLoading(v: boolean): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgMDatatable<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgMDatatable<any>, "data-table", never, {
    "data": "data";
    "options": "options";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbS1kYXRhdGFibGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5nLW0tZGF0YXRhYmxlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0Q0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBPbkluaXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgRWxlbWVudFJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBNYXRQYWdpbmF0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvcGFnaW5hdG9yXCI7XG5pbXBvcnQgeyBNYXRTb3J0IH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL3NvcnRcIjtcbmltcG9ydCB7IE1hdFRhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL3RhYmxlXCI7XG5pbXBvcnQgeyBEYXRhVGFibGVEYXRhU291cmNlIH0gZnJvbSBcIi4vbmctbS1kYXRhdGFibGUuZGF0YXNvdXJjZVwiO1xuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQnVpbGRlciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuZXhwb3J0IGludGVyZmFjZSBOZ01EYXRhdGFibGVPcHRpb25zPFQ+IHtcbiAgICBjb2x1bW5zOiBBcnJheTxUZXh0Q29sdW1uIHwgQWN0aW9uQ29sdW1uPFQ+PjtcbiAgICBkaXNwbGF5ZWRDb2x1bW5zOiBTdHJpbmdbXTtcbiAgICB0aXRsZT86IFN0cmluZztcbiAgICBhZGRCdXR0b24/OiB7XG4gICAgICAgIGljb246IHN0cmluZztcbiAgICAgICAgaGFuZGxlcjogKCkgPT4gdm9pZDtcbiAgICB9O1xufVxuZXhwb3J0IGludGVyZmFjZSBUZXh0Q29sdW1uIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHRleHQ6IHN0cmluZztcbiAgICB0eXBlPzogXCJ0ZXh0XCI7XG59XG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkNvbHVtbjxUPiB7XG4gICAgaWQ6IHN0cmluZztcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdHlwZTogXCJhY3Rpb25cIjtcbiAgICBhY3Rpb25zOiBBcnJheTx7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgaGFuZGxlcjogKGRhdGE6IFQpID0+IHZvaWQ7XG4gICAgICAgIGljb246IHN0cmluZztcbiAgICAgICAgZGlzYWJsZWQ/OiBzdHJpbmc7XG4gICAgfT47XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ01EYXRhdGFibGU8VD4gaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcGFnaW5hdG9yOiBNYXRQYWdpbmF0b3I7XG4gICAgc29ydDogTWF0U29ydDtcbiAgICB0YWJsZTogTWF0VGFibGU8VD47XG4gICAgdGFibGVIVE1MOiBFbGVtZW50UmVmO1xuICAgIG9wdGlvbnM6IE5nTURhdGF0YWJsZU9wdGlvbnM8VD47XG4gICAgZGF0YTogQXJyYXk8VD47XG4gICAgZGF0YVNvdXJjZTogRGF0YVRhYmxlRGF0YVNvdXJjZTxUPjtcbiAgICBzaG93U3Bpbm5lcjogYm9vbGVhbjtcbiAgICB0YWJsZUNvbG9yOiBzdHJpbmc7XG4gICAgdGFibGVCZzogc3RyaW5nO1xuICAgIHNlYXJjaEZvcm06IEZvcm1Hcm91cDtcbiAgICBjb25zdHJ1Y3RvcihmYjogRm9ybUJ1aWxkZXIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgYXNBY3Rpb24oYzogVGV4dENvbHVtbiB8IEFjdGlvbkNvbHVtbjxUPik6IEFjdGlvbkNvbHVtbjxUPjtcbiAgICBmaWx0ZXIoc2VhcmNoTmFtZTogc3RyaW5nKTogYW55O1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHRvZ2dsZUxvYWRpbmcodjogYm9vbGVhbik6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG59XG4iXX0=